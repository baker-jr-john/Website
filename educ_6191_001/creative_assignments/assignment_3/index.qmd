---
pagetitle: "John Baker – Learning Analytics"
title: "Knowledge Structure Mapping: Comprehensive Report"
description: "A comprehensive exploration of knowledge structure mapping using Factor Analysis, KMeans clustering, and PCA to uncover latent skills in an eight-item test dataset."
date: 2024-11-20
# date-modified: 
author: 
  - name: John Baker
    email: jbaker1@upenn.edu
    affiliation:
      - name: "Penn GSE: University of Pennsylvania Graduate School of Education"
        url: https://www.gse.upenn.edu/
abstract: |
  This study aims to identify the underlying knowledge structure of an eight-item test dataset by applying Factor Analysis, KMeans clustering, and Principal Component Analysis (PCA). Factor Analysis was utilized to uncover latent skills, with results cross-validated using KMeans clustering (simulating Barnes's Q-Matrix method) and PCA. Models with two to four components were compared to determine the optimal skill representation. The findings indicate that a three-component Factor Analysis model best captures the relationships among test items, effectively identifying three distinct skills. The final Q-matrix balances complexity and interpretability, providing a robust mapping of items to latent skills and enhancing the understanding of the dataset's knowledge structure.
keywords:
  - knowledge structure mapping
  - Factor Analysis
  - Q-matrix
  - latent skills
  - PCA
bibliography: bibliography/bibliography.bib
nocite: |
  @*
# image: images/image_fx_.png
format:
  html:
    code-link: false
draft: true
jupyter: python3
ipynb-shell-interactivity: all
execute: 
  freeze: false
---

## Introduction

Understanding the knowledge structure of learners is fundamental in the field of educational assessment and learning analytics. **Knowledge structure mapping** allows educators and researchers to uncover the relationships between test items and the underlying skills or concepts they measure. This understanding is crucial for developing effective educational tools, improving assessment strategies, and tailoring instruction to meet individual student needs. By mapping how different items relate to latent skills, educators can identify areas where students may struggle and provide targeted interventions.

Despite its importance, determining the optimal representation of latent skills within test data poses significant challenges, especially with limited datasets. Traditional methods often rely on assumptions that may not hold true across different educational contexts or types of assessments. Therefore, there is a need for robust, data-driven approaches that can accurately identify and validate the underlying skill structures in assessment data.

This study addresses this gap by investigating the knowledge structure underlying an eight-item test dataset using advanced statistical and machine learning techniques. Specifically, I employ **Factor Analysis** to uncover latent skills within the data, **KMeans clustering** to simulate Barnes's Q-Matrix method for grouping items based on response patterns, and **Principal Component Analysis (PCA)** to validate the item-skill relationships identified. By comparing models with varying numbers of components—from two to four—I aim to determine the most suitable skill structure representation for the dataset.

Our approach contributes to the existing body of research by providing a comprehensive methodology that balances complexity with interpretability. The final **Q-matrix** derived from our analysis offers a robust mapping of items to latent skills, enhancing the interpretability of test results. This study not only demonstrates the effectiveness of combining multiple analytical methods for knowledge structure mapping but also provides insights that can inform the development of more nuanced educational assessments and personalized learning strategies.

## Background and Related Work

### Knowledge Structure Mapping

**Knowledge structure mapping** is a fundamental process in educational data mining that involves analyzing and visualizing learners' conceptual understanding and cognitive organization of information [@gordon2003learning]. It enables educators and researchers to represent relationships between different pieces of knowledge, facilitating the development of personalized learning experiences and more effective educational tools.

Several methods have been developed to map knowledge structures, each with its own advantages and limitations.

One key method is **Learning Factors Analysis (LFA)**, which is used to evaluate and refine cognitive models [@cen2006learning]. LFA leverages student performance data to improve the accuracy of these models, thereby enhancing personalized learning by tailoring instruction to individual student needs.

**Partial Order Knowledge Spaces (POKS)** provide another powerful framework for representing knowledge structures [@desmarais2006learned]. POKS uses partially ordered sets of skills to model how knowledge builds upon itself. For example, mastering addition might be a prerequisite for learning multiplication, reflecting the hierarchical nature of certain learning processes.

**Factor Analysis** is a statistical technique widely used in knowledge structure mapping to uncover hidden relationships between observed variables—such as test items—and underlying latent variables—such as skills [@beavers2019practical]. By analyzing correlations among test items, Factor Analysis can reveal clusters of items that measure the same underlying skill. This data-driven approach helps in identifying latent skills without requiring prior knowledge of the skill structure.

**Barnes's Q-matrix method** is a specific technique for representing the relationship between items and skills using a binary matrix [@barnes2005q]. In this matrix, rows represent test items, columns represent skills, and entries indicate whether a skill is required for a particular item. The Q-matrix provides a visual and analytical tool for understanding which skills are assessed by each item, and it is widely used in cognitive modeling and educational data mining.

**KMeans Clustering** can simulate the Q-matrix method by grouping items based on response patterns without prior knowledge of the skill structure. By clustering items that have similar response profiles, researchers can infer potential underlying skills that explain these patterns. This unsupervised learning approach allows for the exploration of latent skill groupings in the absence of predefined skill mappings.

**Principal Component Analysis (PCA)** is another statistical method employed in knowledge structure mapping to reduce the dimensionality of data while preserving as much variance as possible. PCA identifies principal components, which are linear combinations of the original variables (test items), and these components can be interpreted as underlying skills or factors influencing student performance. PCA helps in validating the item-skill relationships identified through other methods like Factor Analysis by providing an alternative perspective on the data's structure.

These methods are applied in various contexts within educational data mining:

- **Intelligent Tutoring Systems (ITSs):** Knowledge structure mapping is crucial for ITSs to personalize instruction and provide tailored feedback based on individual student performance and identified skill gaps [@de2008educational].

- **Predicting Student Performance:** Understanding knowledge structures enables the prediction of student performance on assessments and helps in identifying students who are at risk of falling behind, allowing for timely interventions [@de2008educational].

- **Analyzing Student Behavior:** Knowledge structure mapping can be used to analyze student behavior patterns, such as help-seeking actions, providing insights into how students approach learning tasks and where they may encounter difficulties [@cukurova2022learning].

The importance of using data-driven approaches, such as Factor Analysis, KMeans clustering, and PCA, lies in their ability to uncover patterns and relationships that might not be apparent through traditional methods [@chen2018knowedu]. These techniques allow researchers to identify latent skills and understand how knowledge is organized within a dataset, which can be applied to improve educational practices and assessment designs.

However, each method has its limitations. Factor Analysis and PCA typically assume that the data are continuous and normally distributed, which may not always be the case with binary test item responses. KMeans clustering requires the specification of the number of clusters in advance and may not capture complex, hierarchical relationships between items and skills. Despite these limitations, when used in combination, these methods can provide a robust analysis of knowledge structures by cross-validating findings and offering complementary insights.

## Methods Used

### Overview

This study employs a combination of statistical and machine learning techniques—**Factor Analysis**, **KMeans Clustering**, and **Principal Component Analysis (PCA)**—to uncover the latent skills underlying an eight-item test dataset. Each method offers unique insights into the data, and their combined use allows for cross-validation of findings, enhancing the robustness of the knowledge structure mapping.

### Factor Analysis

**Factor Analysis** was chosen as the primary method to discover the underlying latent skills measured by the test items. This statistical technique identifies factors (latent variables) that explain the patterns of correlations among observed variables (test items). By reducing the dimensionality of the data, Factor Analysis helps reveal the structure of the latent skills that influence student performance.

**Rationale**:

- **Data-Driven Identification**: Factor Analysis does not require prior knowledge of the skill structure, making it suitable for exploratory analysis in identifying latent skills.
- **Correlation Structure**: It effectively captures the underlying correlation structure among test items, which is essential for understanding how items group together based on the skills they assess.

**Assumptions and Justifications**:

- **Binary Data Consideration**: Although Factor Analysis traditionally assumes continuous and normally distributed data, it can be applied to binary data in exploratory contexts. Given that test item responses are binary (correct or incorrect), I acknowledge that this application may introduce limitations, but it is acceptable for exploratory purposes.
- **Sample Size Adequacy**: The dataset contains responses from a sufficient number of students to justify the use of Factor Analysis despite the binary nature of the data.
- **Number of Factors**: I initially selected three factors based on the expectation of three underlying skills. To ensure robustness, models with two and four factors were also tested to explore alternative structures.

### Barnes's Q-Matrix Method (Simulated using KMeans Clustering)

To simulate **Barnes's Q-Matrix method**, I employed **KMeans Clustering** on the transposed item data. The Q-matrix is a binary matrix that maps test items to the skills they require, and simulating this process helps in identifying clusters of items associated with specific skills.

**Rationale**:

- **Unsupervised Learning**: KMeans Clustering groups items based on similarity in response patterns without prior assumptions about the skill structure, effectively simulating the Q-matrix creation.
- **Cross-Validation**: It provides an alternative perspective on item groupings, allowing us to validate the findings from Factor Analysis.

**How KMeans Clustering Simulates the Q-Matrix Method**:

- **Item Clustering**: By clustering items that have similar response patterns across students, KMeans Clustering effectively groups items that may require the same underlying skill.
- **Skill Inference**: Each cluster represents a group of items that are likely associated with a common skill, analogous to columns in the Q-matrix.

**Assumptions and Justifications**:

- **Number of Clusters**: I set the number of clusters to three, consistent with the initial number of factors in Factor Analysis, to facilitate comparison.
- **Distance Metric**: The default Euclidean distance was used for clustering, appropriate for binary data when the focus is on the similarity of response patterns.

### Principal Component Analysis (PCA)

**Principal Component Analysis (PCA)** was utilized to further validate the item-skill relationships identified through Factor Analysis and KMeans Clustering. PCA reduces data dimensionality by transforming the original variables into a new set of uncorrelated variables (principal components) that capture the maximum variance.

**Rationale**:

- **Alternative Dimensionality Reduction**: PCA offers an alternative method for identifying underlying structures in the data, providing a means to cross-validate findings from Factor Analysis.
- **Variance Explanation**: By examining the amount of variance explained by each principal component, I can infer the significance of the underlying skills.

**Assumptions and Justifications**:

- **Binary Data Consideration**: Similar to Factor Analysis, PCA is traditionally applied to continuous data. However, for exploratory purposes and with appropriate caution, it can be applied to binary data to identify major components influencing response patterns.
- **Number of Components**: Three principal components were extracted to maintain consistency with the other methods and to facilitate direct comparison.

### Model Iteration and Comparison

To determine the optimal skill representation, I iteratively tested models with varying numbers of components—two, three, and four—across all methods.

**Rationale**:

- **Exploring Complexity**: Testing multiple models allows us to explore how the complexity of the model affects the interpretability and explanatory power of the latent skills.
- **Avoiding Overfitting and Oversimplification**: By comparing models with different numbers of components, I aim to find a balance between capturing sufficient detail and maintaining simplicity.

**Assumptions and Justifications**:

- **Consistency Across Methods**: Maintaining the same number of components or clusters across different methods aids in comparing and validating the results.
- **Interpretability Priority**: The selection of the optimal model is guided by the interpretability of the results, ensuring that the identified skills make practical sense in the context of educational assessment.

### Data Preparation and Preprocessing

Before applying the methods, the data were prepared and preprocessed to ensure accurate analysis.

**Steps**:

- **Data Loading**: The dataset was loaded using pandas, containing binary responses (correct or incorrect) for eight test items across multiple students.
- **Item Data Extraction**: The 'student' identifier column was excluded to focus on item responses.
- **Data Transformation**: For KMeans Clustering, the item data were transposed to cluster items rather than students.

**Assumptions and Justifications**:

- **Data Quality**: It is assumed that the data are accurate and free from errors or missing values, which is critical for the validity of the analyses.
- **Binary Nature of Responses**: The binary nature of the item responses is considered in the selection and application of methods, acknowledging potential limitations.

### Summary of Methodological Approach

By combining Factor Analysis, KMeans Clustering, and PCA, I leverage the strengths of each method while mitigating their individual limitations.

- **Factor Analysis** identifies latent skills based on correlation structures.
- **KMeans Clustering** groups items based on response pattern similarities without prior assumptions.
- **PCA** validates the findings by identifying principal components that explain the most variance.

This multi-method approach enhances the reliability of the knowledge structure mapping and provides a comprehensive understanding of the latent skills assessed by the test items.

## Implementation Details

### Data Preparation

#### Loading the Data

To begin the analysis, I loaded the dataset containing binary responses (correct or incorrect) for eight test items from multiple students. The `pandas` library was used for data manipulation due to its efficiency and ease of use with tabular data.

```{python}
# Import necessary libraries
import pandas as pd

# Load the dataset
data = pd.read_csv('data/8items.csv')

# Display the first few rows of the dataset
data.head()
```

**Explanation**:

- **Data Loading**: The dataset `8items.csv` is read into a pandas DataFrame called `data`.
- **Data Inspection**: Using `data.head()`, I display the first few rows to verify that the data has been loaded correctly.

#### Data Exploration

Before proceeding, I explored the data to understand its structure and check for any anomalies.

```{python}
# Check the dimensions of the dataset
print(f"Dataset dimensions: {data.shape}")

# Check for missing values
print("Missing values in each column:")
print(data.isnull().sum())
```

**Explanation**:

- **Dataset Dimensions**: I print the shape of the DataFrame to confirm the number of students (rows) and items (columns).
- **Missing Values**: I check for any missing values that could affect the analysis.

**Findings**:

- The dataset has the expected dimensions with no missing values, indicating that it is ready for analysis.

### Factor Analysis

#### Preparing Data for Factor Analysis

I extracted the item response data, excluding any non-item columns such as 'student' identifiers.

```{python}
# Extract item data (excluding the 'student' column if present)
item_data = data.drop(columns=['student'], errors='ignore')
```

**Explanation**:

- **Data Extraction**: I drop the 'student' column to focus solely on the item responses.
- **Error Handling**: The `errors='ignore'` parameter ensures that if the 'student' column is not present, the code will not raise an error.

#### Performing Factor Analysis

I applied Factor Analysis with three components to identify latent skills in the dataset. The `FactorAnalysis` module from `sklearn.decomposition` was used to perform the analysis.

```{python}
# Import FactorAnalysis module
from sklearn.decomposition import FactorAnalysis

# Specify the number of factors (latent skills) to extract
n_factors = 3

# Initialize the Factor Analysis model
fa_model = FactorAnalysis(n_components=n_factors, random_state=42)

# Fit the model to the item data
fa_model.fit(item_data)
```
```{python}
# Retrieve the factor loadings
factor_loadings = fa_model.components_.T

# Create a DataFrame for the factor loadings
factor_loadings_df = pd.DataFrame(
    factor_loadings,
    index=item_data.columns,
    columns=[f'Skill_{i+1}' for i in range(n_factors)]
)
```

**Explanation**:

- **Model Initialization**: I initialize the `FactorAnalysis` model with `n_components=3`, intending to extract three latent skills.
- **Model Fitting**: The model is fitted to `item_data`.
- **Factor Loadings**: I obtain the factor loadings, which represent the correlation coefficients between items and factors (skills).
- **DataFrame Creation**: The factor loadings are organized into a DataFrame for better visualization and interpretation.

```{python}
# Display the factor loadings
print(factor_loadings_df)
```

The factor loadings suggest that items group together based on their highest loadings, indicating the presence of three distinct latent skills.

### KMeans Clustering

#### Transposing Item Data

To cluster items based on their response patterns, I transpose the item data.

```{python}
# Import KMeans module
from sklearn.cluster import KMeans

# Transpose the item data to have items as rows and students as columns
item_data_transposed = item_data.T

# Specify the number of clusters (skills)
n_clusters = 3

# Initialize the KMeans model
kmeans = KMeans(n_clusters=n_clusters, random_state=42)

# Fit the model to the transposed item data
kmeans.fit(item_data_transposed)
```
```{python}
# Retrieve the cluster labels for each item
cluster_labels = kmeans.labels_

# Create a DataFrame to display the item-cluster mapping
kmeans_q_matrix_df = pd.DataFrame({
    'Item': item_data.columns,
    'Mapped_Skill': [f'Skill_{label+1}' for label in cluster_labels]
})
```

**Explanation**:

- **Transposition**: Clustering is performed on items, so I transpose the data to have items as the observations.
  
#### Applying KMeans Clustering

I apply KMeans clustering to group items into clusters representing latent skills.

**Explanation**:

- **Model Initialization**: I initialize the `KMeans` model with `n_clusters=3`.
- **Model Fitting**: The model is fitted to `item_data_transposed`.
- **Cluster Labels**: Each item is assigned a cluster label, indicating its grouping.
- **Mapping Items to Skills**: I map cluster labels to skill identifiers for interpretation.

```{python}
# Display the item-cluster mapping
print(kmeans_q_matrix_df)
```

The clustering results provide an alternative item-skill mapping that can be compared with the Factor Analysis findings.

### Principal Component Analysis (PCA)

#### Performing PCA

I use PCA to identify principal components that may represent latent skills.

```{python}
# Import PCA module
from sklearn.decomposition import PCA

# Initialize the PCA model with three components
pca_model = PCA(n_components=3)

# Fit the PCA model to the item data
pca_model.fit(item_data)
```
```{python}
# Retrieve the PCA loadings
pca_loadings = pca_model.components_.T

# Create a DataFrame for the PCA loadings
pca_loadings_df = pd.DataFrame(
    pca_loadings,
    index=item_data.columns,
    columns=[f'Skill_{i+1}' for i in range(3)]
)
```

**Explanation**:

- **Model Initialization**: I initialize the `PCA` model with `n_components=3`.
- **Model Fitting**: The model is fitted to `item_data`.
- **PCA Loadings**: The loadings indicate the contribution of each item to the principal components.

```{python}
# Display the PCA loadings
print(pca_loadings_df)
```

The PCA results offer additional insights into the item-skill relationships, which can be compared with the results from Factor Analysis and KMeans Clustering.

## Results

### Mapping Items to Skills Using PCA

To further understand the item-skill relationships, I created a Q-matrix based on the **Principal Component Analysis (PCA)** loadings. Each item was assigned to the skill (principal component) with which it had the highest loading.

```{python}
# Determine the skill with the highest loading for each item from PCA
pca_q_matrix = pca_loadings_df.idxmax(axis=1)

# Create the Q-matrix as a DataFrame, showing the mapping between items and skills
pca_q_matrix_df = pd.DataFrame({'Item': item_data.columns, 'Mapped_Skill': pca_q_matrix.values})
pca_q_matrix_df
```

### Comparison Across Methods

I compared the item-skill mappings obtained from **Factor Analysis**, **KMeans Clustering**, and **PCA** to identify consistent patterns and discrepancies.

1. **Consistent Groupings**:
   - **Items 2, 4, and 6** consistently group together across all methods, suggesting they measure the same underlying skill.
   - **Items 3, 7, and 8** also show consistent grouping in KMeans and PCA results.

2. **Method Differences**:
   - **Factor Analysis** shows some differences compared to KMeans and PCA, particularly in the assignment of **Items 1 and 5**.
   - **KMeans Clustering** and **PCA** exhibit identical groupings, reinforcing the reliability of these methods in this context.

3. **Item-Specific Observations**:
   - **Item 5**: Its classification varies across methods (assigned to `Skill_2` in Factor Analysis and `Skill_3` in PCA and KMeans), indicating it may be influenced by multiple skills.
   - **Item 1**: Assigned to `Skill_3` in both Factor Analysis and PCA, suggesting a strong association.

### Testing Alternative Factor Analysis Models

To determine the optimal number of latent skills, I tested **Factor Analysis** models with two, three, and four components.

#### Factor Analysis with Four Components

```{python}
# Performing Factor Analysis with four components to explore the potential presence of additional latent skills
n_factors_extended = 4
fa_model_extended = FactorAnalysis(n_components=n_factors_extended, random_state=42)
fa_model_extended.fit(item_data)

# Get the factor loadings for the 4-component model
factor_loadings_extended = fa_model_extended.components_.T

# Create a DataFrame to visualize the factor loadings for the four-component model
factor_loadings_extended_df = pd.DataFrame(factor_loadings_extended, index=item_data.columns, columns=[f'Skill_{i+1}' for i in range(n_factors_extended)])
factor_loadings_extended_df
```

**Observations from the Four-Component Model**:

1. **Consistent Groupings**:
   - **Skill_1**: Items 3, 7, and 8 have high loadings, indicating a strong association.
   - **Skill_2**: Items 2, 4, and 6 maintain strong relationships.

2. **Complex Relationships**:
   - **Items 1 and 5** show split loadings between **Skill_3** and **Skill_4**, suggesting they may require multiple skills.
   - **Item 4** exhibits secondary loading on **Skill_4**, indicating potential cross-loading.

3. **Model Implications**:
   - The four-component model reveals nuanced relationships but introduces complexity that may not significantly enhance interpretability.

#### Factor Analysis with Two Components

```{python}
# Performing Factor Analysis with two components to explore if a simpler model might explain the relationships
n_factors_simpler = 2
fa_model_simpler = FactorAnalysis(n_components=n_factors_simpler, random_state=42)
fa_model_simpler.fit(item_data)

# Get the factor loadings for the two-component model
factor_loadings_simpler = fa_model_simpler.components_.T

# Create a DataFrame to visualize the factor loadings for the two-component model
factor_loadings_simpler_df = pd.DataFrame(factor_loadings_simpler, index=item_data.columns, columns=[f'Skill_{i+1}' for i in range(n_factors_simpler)])
factor_loadings_simpler_df
```

**Observations from the Two-Component Model**:

1. **Simplified Groupings**:
   - **Skill_1**: Items 2, 4, and 6 cluster together.
   - **Skill_2**: Items 3, 5, 7, and 8 group together.

2. **Limitations**:
   - **Item 1** does not fit well into this two-skill structure, indicating that the model is too simplistic to capture all item relationships.

### Visualizations

#### Diagrams


I created some [Mermaid](https://mermaid.js.org/) diagrams to gain further insight.[^1]

[^1]: Refer to [the project's GitHub repository](https://github.com/baker-jr-john/Website/blob/main/educ_6191_001/creative_assignments/assignment_3/index.qmd) for the code behind the diagrams.

##### Comparison Across the Three Methods

```{mermaid}
graph TB
    subgraph PCA
        PCA_S3[Skill_3] --- PCA_I1[Item 1]
        PCA_S3 --- PCA_I5[Item 5]
        
        PCA_S2[Skill_2] --- PCA_I2[Item 2]
        PCA_S2 --- PCA_I4[Item 4]
        PCA_S2 --- PCA_I6[Item 6]
        
        PCA_S1[Skill_1] --- PCA_I3[Item 3]
        PCA_S1 --- PCA_I7[Item 7]
        PCA_S1 --- PCA_I8[Item 8]
    end
    
    subgraph KMeans
        BQ_S3[Skill_3] --- BQ_I1[Item 1]
        BQ_S3 --- BQ_I5[Item 5]
        
        BQ_S1[Skill_1] --- BQ_I3[Item 3]
        BQ_S1 --- BQ_I7[Item 7]
        BQ_S1 --- BQ_I8[Item 8]
        
        BQ_S2[Skill_2] --- BQ_I2[Item 2]
        BQ_S2 --- BQ_I4[Item 4]
        BQ_S2 --- BQ_I6[Item 6]
    end
    
    subgraph Factor_Analysis
        FA_S1[Skill_1] --- FA_I2[Item 2]
        FA_S1 --- FA_I4[Item 4]
        FA_S1 --- FA_I6[Item 6]
        
        FA_S2[Skill_2] --- FA_I3[Item 3]
        FA_S2 --- FA_I5[Item 5]
        FA_S2 --- FA_I7[Item 7]
        FA_S2 --- FA_I8[Item 8]
        
        FA_S3[Skill_3] --- FA_I1[Item 1]
    end

    style PCA fill:#f9f,stroke:#333,stroke-width:2px
    style KMeans fill:#9ff,stroke:#333,stroke-width:2px
    style Factor_Analysis fill:#ff9,stroke:#333,stroke-width:2px
```

##### Factor Analysis with Four Components

```{mermaid}
graph TD
    subgraph Strong_Relationships
        S1[Skill_1] --- I3[Item 3]
        S1 --- I7[Item 7]
        S1 --- I8[Item 8]
        
        S2[Skill_2] --- I2[Item 2]
        S2 --- I4[Item 4]
        S2 --- I6[Item 6]
    end
    
    subgraph Split_Influences
        S3[Skill_3] -.-> I1[Item 1]
        S4[Skill_4] -.-> I1
        
        S3 -.-> I5[Item 5]
        S4 -.-> I5
        
        S4 -.-> I4[Item 4]
    end
    
    style Strong_Relationships fill:#f9f,stroke:#333,stroke-width:2px
    style Split_Influences fill:#ff9,stroke:#333,stroke-width:2px
    
    classDef solid stroke-width:4px
    classDef dashed stroke-dasharray: 5, 5
    class S1,S2,I2,I3,I4,I6,I7,I8 solid
    class S3,S4,I1,I5 dashed
```

##### Factor Analysis with Two Components

```{mermaid}
graph TB
    subgraph Two_Component_Model
        TC_S1[Skill_1] --- TC_I2[Item 2]
        TC_S1 --- TC_I4[Item 4]
        TC_S1 --- TC_I6[Item 6]
        
        TC_S2[Skill_2] --- TC_I3[Item 3]
        TC_S2 --- TC_I5[Item 5]
        TC_S2 --- TC_I7[Item 7]
        TC_S2 --- TC_I8[Item 8]
        
        TC_I1[Item 1<br/>Weak Loadings] -..- TC_S1
        TC_I1 -..- TC_S2
    end
    
    subgraph Three_Component_Model
        TH_S1[Skill_1] --- TH_I2[Item 2]
        TH_S1 --- TH_I4[Item 4]
        TH_S1 --- TH_I6[Item 6]
        
        TH_S2[Skill_2] --- TH_I3[Item 3]
        TH_S2 --- TH_I7[Item 7]
        TH_S2 --- TH_I8[Item 8]
        
        TH_S3[Skill_3] --- TH_I1[Item 1]
        TH_S3 --- TH_I5[Item 5]
    end
    
    subgraph Four_Component_Model
        FC_S1[Skill_1] --- FC_I3[Item 3]
        FC_S1 --- FC_I7[Item 7]
        FC_S1 --- FC_I8[Item 8]
        
        FC_S2[Skill_2] --- FC_I2[Item 2]
        FC_S2 --- FC_I4[Item 4]
        FC_S2 --- FC_I6[Item 6]
        
        FC_S3[Skill_3] -.-> FC_I1[Item 1]
        FC_S4[Skill_4] -.-> FC_I1
        
        FC_S3 -.-> FC_I5[Item 5]
        FC_S4 -.-> FC_I5
    end

    style Two_Component_Model fill:#f9f,stroke:#333,stroke-width:2px
    style Three_Component_Model fill:#9ff,stroke:#333,stroke-width:2px
    style Four_Component_Model fill:#ff9,stroke:#333,stroke-width:2px
```

#### Heatmap of Factor Loadings (Three Components)

I visualized the factor loadings from the three-component Factor Analysis model using a heatmap.

```{python}
import matplotlib.pyplot as plt
import seaborn as sns

# Create a heatmap to visualize item-skill relationships from Factor Analysis
plt.figure(figsize=(10, 6))
sns.heatmap(factor_loadings_df, annot=True, cmap='coolwarm', linewidths=0.5, linecolor='black', cbar=True)
plt.title('Item-Skill Relationships (Factor Analysis with 3 Components)')
plt.xlabel('Skills')
plt.ylabel('Items')
plt.show()
```

**Key Observations from the Heatmap**:

- **Strong Associations**:
  - **Item6** has a high loading on **Skill_1** (~0.45).
  - **Items 3, 7, and 8** have high loadings on **Skill_2** (~0.39 to 0.40).
  - **Item1** shows a notable loading on **Skill_3** (~0.37).

- **Weaker Associations**:
  - Other items have lower or split loadings, indicating weaker or more complex relationships with the skills.

#### Bar Charts for Individual Items

I generated bar charts to illustrate the factor loadings of each item across the three skills.

```{python}
# Create bar charts for each item to show its relationship across skills
num_items = len(factor_loadings_df.index)
fig, axes = plt.subplots(num_items, 1, figsize=(9, num_items * 2))

for i, item in enumerate(factor_loadings_df.index):
    axes[i].bar(factor_loadings_df.columns, factor_loadings_df.loc[item], color='skyblue')
    axes[i].set_title(f'Relationship of {item} with Skills')
    axes[i].set_ylabel('Loading Value')
    axes[i].set_ylim(-1, 1)

plt.tight_layout()

plt.show()
```

**Insights from the Bar Charts**:

- **Item-Specific Relationships**:
  - **Item1**: Highest loading on **Skill_3**.
  - **Item2**, **Item4**, **Item6**: Highest loadings on **Skill_1**.
  - **Items 3, 7, 8**: Highest loadings on **Skill_2**.
  - **Item5**: Similar loadings on **Skill_2** and **Skill_3**, indicating potential dual influence.

### Creating the Final Q-Matrix

Based on the analyses and visualizations, I created the final **Q-matrix** by assigning each item to the skill with which it has the highest loading from the three-component Factor Analysis model.

```{python}
# Creating the final Q-matrix based on the visualization and analysis findings
# Assigning each item to the skill with the highest loading from the Factor Analysis with three components
final_q_matrix = factor_loadings_df.idxmax(axis=1)

# Create a DataFrame to visualize the final Q-matrix, showing the mapping between items and skills
final_q_matrix_df = pd.DataFrame({'Item': item_data.columns, 'Mapped_Skill': final_q_matrix.values})
final_q_matrix_df
```
```{mermaid}
graph TD
    subgraph Skill_Mappings
        S1[Skill_1] --- I2[Item 2]
        S1 --- I4[Item 4]
        S1 --- I6[Item 6]
        
        S2[Skill_2] --- I3[Item 3]
        S2 --- I5[Item 5]
        S2 --- I7[Item 7]
        S2 --- I8[Item 8]
        
        S3[Skill_3] --- I1[Item 1]
    end
    
    subgraph Evidence_Types
        FA[Factor Analysis<br/>Highest Loadings] --- S1
        FA --- S2
        FA --- S3
        
        BC[Bar Charts<br/>Visual Validation] --- S1
        BC --- S2
        BC --- S3
    end
    
    style Skill_Mappings fill:#f9f,stroke:#333,stroke-width:2px
    style Evidence_Types fill:#9ff,stroke:#333,stroke-width:2px
    
    classDef skillNode fill:#f96,stroke:#333,stroke-width:2px
    classDef itemNode fill:#9f9,stroke:#333,stroke-width:2px
    classDef evidenceNode fill:#69f,stroke:#333,stroke-width:2px
    
    class S1,S2,S3 skillNode
    class I1,I2,I3,I4,I5,I6,I7,I8 itemNode
    class FA,BC evidenceNode
```

**Explanation:**

- **Skill_1**: Assigned to items **2**, **4**, and **6** due to their highest loadings on this skill.
- **Skill_2**: Assigned to items **3**, **5**, **7**, and **8** based on their highest loadings.
- **Skill_3**: Assigned to **item1**, which has its highest loading on this skill.

**Observations:**

- **Consistency with Previous Findings**:
  - This Q-matrix aligns with the item-skill relationships observed in the bar charts and heatmaps.
  - Items grouped under each skill share similar characteristics and response patterns.

- **Item 5**:
  - While **item5** had comparable loadings on both **Skill_2** and **Skill_3**, it was assigned to **Skill_2** due to a slightly higher loading.

### Discussion

#### Model Comparison and Selection

After comparing models with two, three, and four components, I determined that the **three-component Factor Analysis model** offers the optimal balance between simplicity and explanatory power.

- **Two-Component Model**:
  - **Advantages**: Simplifies the skill structure.
  - **Disadvantages**: Fails to capture the complexity of **item1** and provides a less precise mapping for other items.

- **Three-Component Model**:
  - **Advantages**:
    - Accurately captures key item-skill relationships.
    - Provides clear and interpretable groupings.
    - Balances model complexity with explanatory power.
  - **Disadvantages**: Slightly more complex than the two-component model but justified by the improved fit.

- **Four-Component Model**:
  - **Advantages**: Reveals nuanced relationships and potential cross-loadings.
  - **Disadvantages**:
    - Adds unnecessary complexity without significant interpretive benefits.
    - May overfit the data.

#### Justification for the Final Q-Matrix

The final Q-matrix derived from the three-component Factor Analysis model is justified based on:

- **Consistency Across Methods**:
  - **Items 2, 4, 6** consistently map to **Skill_1**.
  - **Items 3, 7, 8** consistently map to **Skill_2**.
  - **Item1** is uniquely associated with **Skill_3**.

- **Support from PCA and KMeans Clustering**:
  - PCA and KMeans results align closely with the Factor Analysis findings, reinforcing the validity of the item-skill mappings.
  - For instance, **item1** and **item5** show strong associations with **Skill_3** in both PCA and KMeans, while **Factor Analysis** assigns **item5** to **Skill_2** due to the slightly higher loading.

- **Interpretability**:
  - The three-skill model provides clear and meaningful interpretations of the data, which is essential for practical applications in educational assessment.

#### Implications of the Findings

- **Stable Item-Skill Relationships**:
  - The consistent grouping of certain items suggests robust underlying skills being measured.

- **Complex Items**:
  - **Item5** exhibits split influences, indicating it may assess multiple skills or a skill that overlaps between **Skill_2** and **Skill_3**.

- **Educational Impact**:
  - Understanding these item-skill mappings can inform test design and instructional strategies, allowing educators to focus on specific skills where students may need additional support.

#### Limitations and Future Work

- **Binary Data Consideration**:
  - The use of Factor Analysis and PCA on binary data may not fully meet the assumptions of these methods. Future studies could explore Item Response Theory (IRT) models more suited for binary responses.

- **Sample Size and Generalizability**:
  - With only eight items, the findings may not generalize to larger assessments. Replicating the study with more items could validate the model further.

- **Cross-Validation**:
  - Incorporating cross-validation techniques could strengthen the confidence in the selected model.

## Conclusion

Through the application of **Factor Analysis**, **KMeans Clustering**, and **Principal Component Analysis**, I successfully identified the underlying knowledge structure of the eight-item test dataset. The three-component Factor Analysis model emerged as the most effective representation of the latent skills, providing a clear and interpretable mapping of items to skills.

The final **Q-matrix** reflects consistent item-skill relationships validated across multiple methods and supported by visualizations. This comprehensive approach ensures robustness and reliability in uncovering the latent skills measured by the test items, offering valuable insights for educational assessment and instructional design.

### Submission Guidelines

This document includes all required explanations. The code and data are organized to facilitate replication and further analysis. Please let me know if additional information is needed.